#!/usr/bin/env php
<?php

/**
 * .git/hooks/pre-commit
 *
 * This pre-commit hooks will check for PHP errors (lint), and make sure the
 * code is PSR-2 compliant.
 */
class PreCommitChecks
{
    /**
     * @var bool
     */
    private $error = false;

    /**
     * @var string
     */
    private $fileRegEx = '/^.*\.tpl$/';

    /**
     * @var string
     */
    private $blockRegEx = '/{block name=("|\')(.*?)("|\')}/';

    /**
     * @var string
     */
    private $viewDir = __DIR__ . '/../Resources/views';

    /**
     * @var string
     */
    private $ignoreListFile = __DIR__ . '/../.template-block-ignore-list';

    /**
     * @return int
     */
    public function run()
    {
        $this->writeln();
        $this->writeln('Checking commit requirements', 0);
        $this->writeln();

        if ($this->isRebase()) {
            echo 'Not on branch' . PHP_EOL;

            return 0;
        }

        $this->runCheckForDuplicatedBlocksInTemplateFiles();
        $this->runPhpLint($this->getCommittedFileList());
        $this->runPhpCsFixer($this->getCommittedFileList());
        $this->runPHPStan($this->getCommittedFileList());
        $this->runEsLint($this->getCommittedFileList('js'));

        if ($this->error) {
            $this->writeln("If you are ABSOLUTELY sure your code is correct, you can use 'git commit --no-verify' to bypass this validation", 0);
        }

        exit((int) $this->error);
    }

    /**
     * @param string $output
     * @param int    $level
     */
    private function writeln($output = '', $level = 1)
    {
        $this->write($output, $level);
        echo PHP_EOL;
    }

    /**
     * @param string $output
     * @param int    $level
     */
    private function write($output = '', $level = 1)
    {
        $spaces = $level * 3;

        echo str_pad($output, \strlen($output) + $spaces, ' ', STR_PAD_LEFT);
    }

    /**
     * @return bool
     */
    private function isRebase()
    {
        $output = [];
        exec('git symbolic-ref --short -q HEAD', $output);

        return empty($output);
    }

    /**
     * @param string $extension
     *
     * @return string[]
     */
    private function getCommittedFileList($extension = 'php')
    {
        exec("git diff --name-only --diff-filter=ACMRTUXB \"HEAD\" | grep -e '\." . $extension . "$'", $fileList);

        return $fileList;
    }

    private function runPhpLint(array $fileList)
    {
        $this->writeln('# Checking php syntax');
        $this->writeln('> php -l');

        foreach ($fileList as $file) {
            exec('php -l ' . escapeshellarg($file) . ' 2> /dev/null', $output, $return);
            if ($return !== 0) {
                $this->writeln('- ' . $output[1], 2);
                $this->error = true;
            }
        }

        $this->writeln();
    }

    private function runPhpCsFixer(array $fileList)
    {
        $this->writeln('# Checking php code style');
        $this->writeln('> php-cs-fixer fix -v --no-ansi --dry-run');

        if (!$this->isPHPCSFixerAvailable()) {
            $this->error = true;
            $this->writeln('- php-cs-fixer is NOT installed. Please install composer with dev dependencies.', 2);
            $this->writeln();

            return;
        }

        foreach ($fileList as $file) {
            exec('./../../../vendor/bin/php-cs-fixer fix -v --no-ansi --dry-run ' . escapeshellarg($file) . ' 2>&1', $output, $return);

            if ($return !== 0) {
                $this->writeln('- ' . preg_replace('#^(\s+)?\d\)\s#', '', $output[3]), 2);
                $fixes[] = './../../../vendor/bin/php-cs-fixer fix -v ' . escapeshellarg($file);
                $this->error = true;
            }
        }

        if (!empty($fixes)) {
            $this->writeln();
            $this->writeln('Help:', 2);
            foreach ($fixes as $fix) {
                $this->writeln($fix, 3);
            }
        }

        $this->writeln();
    }

    private function runPHPStan(array $fileList)
    {
        $this->writeln('# Checking code with PHPStan');
        $this->writeln('> phpstan.phar analyse');
        $this->writeln();

        if ($fileList === []) {
            return;
        }

        if (!$this->isPHPStanAvailable()) {
            $this->writeln('- PHPStan is NOT installed. Please install composer with dev dependencies or use higher Shopware version.', 2);
            $this->writeln();

            return;
        }

        exec('./../../../vendor/bin/phpstan analyse .', $output, $return);
        if ($return !== 0) {
            $this->error = true;
            $this->writeln('> PHPStan errors found');
        }

        $this->writeln();
    }

    private function runEsLint(array $fileList)
    {
        $this->writeln('# Checking javascript code style');
        $this->writeln('> eslint.js --ignore-path .eslintignore');

        if (!$this->isESLintAvailable()) {
            $this->writeln('- eslint.js not found. Skipping javascript code style check.', 2);
            $this->writeln();

            return;
        }

        $this->checkESLint($fileList);

        $this->writeln();
    }

    /**
     * @return bool
     */
    private function isPHPCSFixerAvailable()
    {
        $output = [];
        $return = 0;
        exec('command -v ./../../../vendor/bin/php-cs-fixer >/dev/null 2>&1', $output, $return);

        return !(bool) $return;
    }

    /**
     * @return bool
     */
    private function isPHPStanAvailable()
    {
        $output = [];
        $return = 0;
        exec('command -v ./../../../vendor/phpstan/phpstan/phpstan.phar >/dev/null 2>&1', $output, $return);

        return !(bool) $return;
    }

    /**
     * @return bool
     */
    private function isESLintAvailable()
    {
        $output = [];
        $return = 0;
        exec('command -v ./../../../themes/node_modules/eslint/bin/eslint.js >/dev/null 2>&1', $output, $return);

        return !(bool) $return;
    }

    private function checkESLint(array $fileList = [])
    {
        $output = [];
        $return = 0;
        exec(
            './../../../themes/node_modules/eslint/bin/eslint.js ' .
            '--ignore-path .eslintignore ' .
            '-c ./../../../themes/.eslintrc.js ' .
            '--global "Ext,Shopware,PAYPAL,paypal,CSRF" ' .
            implode(' ', $fileList),
            $output,
            $return
        );
        $return = !(bool) $return;

        if (!$return) {
            $this->error = true;

            foreach ($output as $line) {
                $this->writeln($line, 2);
            }

            $this->writeln('Help:', 2);
            $this->writeln(
                './../../../themes/node_modules/eslint/bin/eslint.js ' .
                '--fix --ignore-path .eslintignore ' .
                '-c ./../../../themes/.eslintrc.js ' .
                '--global "Ext,Shopware,PAYPAL,paypal,CSRF" ' .
                implode(' ', $fileList),
                3
            );
        }
    }

    private function runCheckForDuplicatedBlocksInTemplateFiles()
    {
        $this->writeln('# Search for duplicated template blocks.');
        $this->writeln();

        $result = [];
        $duplicatedMatch = [];
        $ignoreList = $this->getTemplateBlockIgnoreList();
        $templateFiles = $this->getTemplateFiles($this->viewDir);
        foreach ($templateFiles as $file) {
            $matchCounter = preg_match_all($this->blockRegEx, file_get_contents($file), $matches);
            if ($matchCounter === false) {
                continue;
            }

            foreach ($matches[0] as $blockMatch) {
                if (\in_array($blockMatch, $result) && !\in_array($blockMatch, $ignoreList)) {
                    $duplicatedMatch[] = $blockMatch;
                }

                $result[] = $blockMatch;
            }
        }

        if (\count($duplicatedMatch) > 0) {
            $this->error = true;
            $this->writeln('ERROR: Duplicated template block(s) found.');
            $this->writeln();

            foreach ($duplicatedMatch as $blockMatch) {
                $this->writeln(sprintf('%s has more than 1 match. FILE: %s.', $blockMatch, realpath($file)));
            }
        }
    }

    /**
     * @return string[]
     */
    private function getTemplateBlockIgnoreList()
    {
        if (!is_file($this->ignoreListFile)) {
            $this->writeln('WARNING: Ignore list not found. Pleas create a ".template-block-ignore-list" in plugin base directory.');

            return [];
        }

        $ignoreList = explode(PHP_EOL, file_get_contents($this->ignoreListFile));
        if (!\is_array($ignoreList)) {
            return [];
        }

        return $ignoreList;
    }

    /**
     * @param string            $path
     * @param array<int,string> $fileCollection
     *
     * @return array
     */
    private function getTemplateFiles($path, array $fileCollection = [])
    {
        $files = scandir($path);
        foreach ($files as $file) {
            if (\in_array($file, ['.', '..'])) {
                continue;
            }

            $innerPath = sprintf('%s/%s', $path, $file);
            if (is_dir($innerPath)) {
                $fileCollection = $this->getTemplateFiles($innerPath, $fileCollection);

                continue;
            }

            if (!preg_match($this->fileRegEx, $file)) {
                continue;
            }

            $fileCollection[] = $innerPath;
        }

        return $fileCollection;
    }
}

$checks = new PreCommitChecks();
$checks->run();
